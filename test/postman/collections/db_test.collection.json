{
	"info": {
		"_postman_id": "0c94d76b-f787-4d8f-aa5c-b64cad550a29",
		"name": "DB Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "977f89b7-0e37-4f73-b262-9e76706623e1",
						"exec": [
							"// pm.sendRequest(pm.variables.get(\"url\") + \"/db/test\", function (err, response) {",
							"//     console.log(\"hello\");",
							"//     console.log(response);",
							"// });",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"helloworld\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/db/test",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Single Agent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5ea0393-3daf-4d77-9a6f-ef15cf825b1f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = pm.globals.get(\"responseSchema\");",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "da42038c-efac-4e30-8e27-6b40fb9b2b33",
						"exec": [
							"let details = pm.iterationData.get('details');\r",
							"pm.variables.set('details', JSON.stringify(details));\r",
							"\r",
							"let personalInfo = pm.iterationData.get('personalInfo');\r",
							"pm.variables.set('personalInfo', JSON.stringify(personalInfo));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rainbow_id\": \"{{rainbow_id}}\",\n    \"personalInfo\": {{personalInfo}},\n    \"details\": {{details}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/db/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"add"
					]
				}
			},
			"response": [
				{
					"name": "Add Single Agent [Static Body]",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rainbow_id\": \"5e57b87c6c332176648fcabc\",\n    \"personalInfo\": {\n    \t\"firstname\": \"agent\",\n    \t\"lastname\": \"three\",\n    \t\"email\": \"agent3@sutd.com\"\n    },\n    \"details\": {\n    \t\"languages\": {\n    \t\t\"english\": 1,\n    \t\t\"chinese\": 1,\n    \t\t\"malay\": 0\n    \t},\n    \t\"skills\": {\n    \t\t\"insurance\": 0,\n    \t\t\"bank_statement\": 1,\n    \t\t\"fraud\": 1\n    \t}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/db/add",
							"host": [
								"{{url}}"
							],
							"path": [
								"db",
								"add"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "View All Agents' Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f164d41-ff4a-4bf9-9536-6c869372be1a",
						"exec": [
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = pm.variables.get(\"responseSchema\");",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/db/all/",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"all",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Availiability",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee06837d-3def-4bdf-bb83-151dd6fe5010",
						"exec": [
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = pm.variables.get(\"responseSchema\");",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2d35c0c9-b6ce-4490-9e5c-c11b5a658de8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{url}}/db/agent/{{rainbow_id}}/availability/{{availability}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"agent",
						"{{rainbow_id}}",
						"availability",
						"{{availability}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Single Agent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ab662e9-01e9-4996-90de-9c336bc870c7",
						"exec": [
							"var jsonData = pm.response.json();",
							"var body = JSON.parse(pm.request.body.toJSON().raw);",
							"var compareJSON = {};",
							"compareJSON.agent_id = body.rainbow_id;",
							"for (var key in body.details) {",
							"    for (var innerKey in body.details[key]) {",
							"        compareJSON[innerKey] = body.details[key][innerKey]",
							"    }",
							"}",
							"pm.variables.set(\"tempUpdateAgentJSON\", compareJSON);",
							"",
							"var s = pm.variables.get(\"responseSchema\");",
							"s.data = pm.variables.get(\"agentDetailSchema\");",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = s;",
							"",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "edb73120-1f82-49a6-a055-506ab34329b2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rainbow_id\": \"{{rainbow_id}}\",\n    \"details\": {\n        \"languages\": {\n            \"english\": 1,\n            \"chinese\": 1,\n            \"malay\": 1\n        },\n        \"skills\": {\n            \"insurance\": 1,\n            \"bank_statement\": 1,\n            \"fraud\": 1\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/db/update",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "Update Single Agent [Static Body]",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rainbow_id\": \"fake_rainbow_id10\",\n    \"personalInfo\": {\n    \t\"firstname\": \"Ali\",\n    \t\"lastname\": \"Zhuang\",\n    \t\"email\": \"Zhuang_ali@gmail.com\"\n    },\n    \"details\": {\n    \t\"languages\": {\n    \t\t\"english\": 1,\n    \t\t\"chinese\": 0,\n    \t\t\"malay\": 1\n    \t}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/db/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"db",
								"update"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Calling Routing Engine",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c98c8ffe-e87f-46a2-8786-c9d08fa7a1f8",
						"exec": [
							"var details = pm.variables.get(\"tempUpdateAgentJSON\");",
							"",
							"var routeFiltersArray = [];",
							"",
							"for (var key in details) {",
							"    if (key != \"agent_id\") {",
							"        if (details[key] == 1) {",
							"            routeFiltersArray.push(key);",
							"        }",
							"    }",
							"}",
							"console.log(routeFiltersArray);",
							"var routeFilters = routeFiltersArray.join(\"+\");",
							"console.log(routeFilters);",
							"pm.variables.set(\"routeFilters\", routeFilters);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f3aba2f-3c15-45c3-9748-61e4ae85bd48",
						"exec": [
							"var s = pm.variables.get(\"responseSchema\");",
							"",
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = s;",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"// pm.test('Got Exact Same Agent as set', function() {",
							"//     pm.expect(pm.variables.get(\"rainbow_id\") == jsonData.data.selectedAgent).to.be.true;",
							"// })",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/db/route/{{routeFilters}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"route",
						"{{routeFilters}}"
					]
				}
			},
			"response": [
				{
					"name": "Calling Routing Engine [Static Params]",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/db/route/english+bank_statement",
							"host": [
								"{{url}}"
							],
							"path": [
								"db",
								"route",
								"english+bank_statement"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "View Single Agent's Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5cce61d9-a6b5-4e5a-89a4-4b2844b355b0",
						"exec": [
							"var s = pm.variables.get(\"responseSchema\");",
							"s.data = pm.variables.get(\"agentDetailSchema\");",
							"",
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = s;",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"",
							"var compareJSON = pm.variables.get(\"tempUpdateAgentJSON\");",
							"pm.test(\"Test for Single Agent's Info has been changed\", function() {",
							"    var pass = false;",
							"    for (var key in compareJSON) {",
							"        console.log(jsonData.data[key]);",
							"        if (jsonData.data[key] != compareJSON[key]) {",
							"            pass = true;",
							"        }",
							"    }",
							"    pm.expect(pass).to.be.false;",
							"})",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/db/agent/{{rainbow_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"agent",
						"{{rainbow_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Single Agent's Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34c32c49-546a-4aec-a50c-8a66cb5b524b",
						"exec": [
							"var s = pm.variables.get(\"responseSchema\");",
							"",
							"var jsonData = pm.response.json();",
							"var Ajv = require('ajv'),",
							"    ajv = new Ajv({logger: console, allErrors: true}),",
							"    schema = s;",
							"    ",
							"pm.test('Valid Schema', function() {",
							"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success\", function () {",
							"    pm.expect(jsonData.success).to.be.true;",
							"})",
							"",
							"pm.variables.unset(\"tempUpdateAgentJSON\");",
							"pm.variables.unset(\"routeFilters\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bb3adc3a-b7e2-4525-aa39-63b4ba36c533",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/db/delete/agent/{{rainbow_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"db",
						"delete",
						"agent",
						"{{rainbow_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Single Agent's Info [Static Body]",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/db/delete/agent/fake_rainbow_id3",
							"host": [
								"{{url}}"
							],
							"path": [
								"db",
								"delete",
								"agent",
								"fake_rainbow_id3"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}